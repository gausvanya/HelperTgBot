from aiogram.types import Message, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, ChatMemberUpdatedFilter, JOIN_TRANSITION, LEAVE_TRANSITION
from aiogram import Router, F

from app.DataBase.database import Database
from app.utils import check_admins

db = Database()
router = Router()


@router.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def add_bot(message: ChatMemberUpdated):
    bot_url = ('https://t.me/SupHlpBot?startgroup=Sup&admin=change_info+restrict_members+delete_messages+'
               'pin_messages+invite_users+promote_members+manage_voice_chats+ban_members+view_members')
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚≠êÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', url=bot_url)]])

    await message.answer(
        '**üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —á–∞—Ç!**\n‚ÑπÔ∏è–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–Ω–µ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –ø–æ –≥–∞–π–¥—É:\n'
        '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ -> –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª ¬´–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã¬ª -> –Ω–∞–∂–∏–º–∞–µ—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞¬ª -> '
        '–∏—â–∏—Ç–µ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±–æ—Ç–∞ -> –∫–ª–∏–∫–∞–µ—Ç–µ –Ω–∞ –Ω–µ–≥–æ -> –≤—ã–¥–∞—ë—Ç–µ **–í–°–ï** –ø—Ä–∞–≤–∞ –∫—Ä–æ–º–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.\n\n'
        'üìù [–ú–æ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥](https://teletype.in/@support_bot/suuportcommands)\n'
        'üì£ [–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª](https://t.me/chann_support)', reply_markup=keyboard)


@router.chat_member(ChatMemberUpdatedFilter(LEAVE_TRANSITION))
async def leave_user(message: ChatMemberUpdated):
    user_id = message.old_chat_member.user.id
    user_full_name = message.old_chat_member.user.full_name
    user_username = message.old_chat_member.user.username
    admin_id = message.from_user.id
    admin_full_name = message.from_user.full_name
    admin_username = message.from_user.username

    user_mention = (f'[{user_full_name}](https://t.me/{user_username})' if user_username
                    else f'[{user_full_name}](tg://user?id={user_id})')

    admin_mention = (f'[{admin_full_name}](https://t.me/{admin_username})' if admin_username
                     else f'[{admin_full_name}](tg://user?id={admin_id})')

    if admin_id:
        await message.answer(f'üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –∏—Å–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_mention}')
    else:
        await message.answer(f'üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.')


@router.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def join_user(message: ChatMemberUpdated):
    user_id = message.old_chat_member.user.id
    user_full_name = message.old_chat_member.user.full_name
    user_username = message.old_chat_member.user.username
    admin_id = message.from_user.id
    admin_full_name = message.from_user.full_name
    admin_username = message.from_user.username
    chat_id = message.chat.id

    user_mention = (f'[{user_full_name}](https://t.me/{user_username})' if user_username
                    else f'[{user_full_name}](tg://user?id={user_id})')

    admin_mention = (f'[{admin_full_name}](https://t.me/{admin_username})' if admin_username
                     else f'[{admin_full_name}](tg://user?id={admin_id})')

    if admin_id:
        await message.answer(f'üëã {user_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.\n–î–æ–±–∞–≤–∏–ª: {admin_mention}')
    else:
        await message.answer(f'üëã {user_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.')

    antispam_db = await db.query('SELECT * FROM antispam WHERE user_id=? AND activity=?', (user_id, '–¥–∞'))
    spam_mention = (f'[{user_full_name}](https://t.me/{user_username})' if user_username
                    else f'[{user_full_name}](tg://user?id={user_id})')
    if antispam_db:
        get_chat_member = await message.bot.get_chat_member(chat_id, admin_id)

        if get_chat_member.status in ['creator', 'administrator']:
            await message.answer(f'üìõ –í–Ω–∏–º–∞–Ω–∏–µ!\n–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {spam_mention} –≤ —á–∞—Ç.\n'
                                 f'–û–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –ê–Ω—Ç–∏–°–ø–∞–º\n'
                                 f'üí¨ –ü—Ä–∏—á–∏–Ω–∞: {antispam_db[0][4]}')
        else:
            await message.bot.ban_chat_member(chat_id, user_id)
            return await message.answer(f'üìõ –í–Ω–∏–º–∞–Ω–∏–µ!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {spam_mention} '
                                        f'–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –ê–Ω—Ç–∏–°–ø–∞–º\n'
                                        f'üí¨ –ü—Ä–∏—á–∏–Ω–∞: {antispam_db[0][4]}\n–ò—Å–∫–ª—é—á–∞—é...')

    result = await db.query('SELECT * FROM chat_welcome WHERE chat_id=?', (chat_id,))
    if not result:
        return

    welcome_text = result[0][2].replace('{–∏–º—è}', user_mention)
    if result[0][1]:
        await message.reply_photo(photo=result[0][1], caption=welcome_text)
    else:
        await message.reply(welcome_text)


@router.message(Command('–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', prefix='+', ignore_case=True), F.chat.type != 'private')
async def add_welcome(message: Message):
    chat_id = message.chat.id

    if not check_admins(message):
        return

    try:
        welcome_text = message.md_text.split('\n', 1)[1]
    except IndexError:
        return await message.reply('‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n`+–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n–¢–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.`')

    photo_id = message.photo[-1].file_id if message.photo else None

    welcome_db = await db.query('SELECT * FROM welcome_chat WHERE chat_id=?', (chat_id,))
    if welcome_db:
        await db.query('UPDATE chat_welcome SET welcome_text=?, photo_id=? WHERE chat_id=?',
                       (welcome_text, photo_id, chat_id))
    else:
        await db.query('INSERT INTO chat_welcome VALUES(?, ?, ?)', (chat_id, photo_id, welcome_text))

    await message.reply('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')


@router.message(Command('–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', prefix='-', ignore_case=True), F.chat.type != 'private')
async def remove_welcome(message: Message):
    chat_id = message.chat.id

    if not await check_admins(message):
        return

    welcome = await db.query('SELECT * FROM chat_welcome WHERE chat_id=?', (chat_id,))
    if welcome:
        await db.query('DELETE FROM chat_welcome WHERE chat_id=?', (chat_id,))

    await message.reply('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–æ.')


@router.message(Command('–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', prefix='!/.', ignore_case=True), F.chat.type != 'private')
@router.message(F.text.lower().split('\n', 1)[0] == '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
async def get_welcome(message: Message):
    chat_id = message.chat.id

    if not await check_admins(message):
        return

    welcome_db = await db.query('SELECT * FROM chat_welcome WHERE chat_id=?', (chat_id,))
    if not welcome_db:
        return await message.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')

    welcome_text, photo_id = welcome_db[0][2], welcome_db[0][1]
    if photo_id:
        await message.reply_photo(photo_id, welcome_text)
    else:
        await message.reply(welcome_text)
